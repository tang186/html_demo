* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {

  /* 弹性布局 */
  display: flex;
  justify-content: center;
  align-items: center;
  /* 100%窗口高度 */ 
  height: 100vh;
  /* 背景渐变色 */
  background-image: linear-gradient(200deg, #5ee7ef, #b490ca);
  /* CSS 属性 perspective 指定了观察者与 z=0 平面的距离，
  使具有三维位置变换的元素产生透视效果。
  z>0 的三维元素比正常大，而 z<0 时则比正常小，大小程度由该属性的值决定。 */
  perspective: 800px;
}

.card {
  position: relative;
  width: 300px;
  height: 450px;
  border-radius: 30px;
  cursor: pointer;
  background-color: #fff;
  box-shadow: 1px 1px 20px rgba(0, 0, 0, 0.1);
  /* 盒子变成3d盒子就可以实现旋转的效果 */
  /* 这个效果和flex一样添加到父元素上 影响子元素 */
  transform-style: preserve-3d;

  /* 给卡片添加默认的旋转动画 */
  /* forwards表示停在动画最后那个画面 cubic-bezier表示动画速度 */
  animation: rotate-reverse 1.2s cubic-bezier(0.66, -0.47, 0.33, 1.5)
  forwards;
}

.card:hover {
  /* 动画（名称， 时长， 内塞尔曲线， forwards表示停在动画最后那个画面） */
  animation: rotate 1.2s cubic-bezier(0.66, -0.47, 0.33, 1.5) 
  forwards;

}
.front,.back {
  /* CSS 属性 backface-visibility 指定当元素背面朝向观察者时是否可见。 有hidden 和 visible */
  backface-visibility:hidden;
  /* 绝对定位 */
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  /* 弹性布局 */
  display: flex;
  /* 主轴为竖的 */
  flex-direction: column;
  /* 侧轴就是横的  让侧轴水平居中就是让字体居中显示 */
  align-items: center;
  /* 主轴是竖的 让他平分竖的空间 */
  justify-content: space-around;
  font-size: 20px;
  background-color: #fff;
  border-radius: 30px;
}

.back {

  /* 在父元素变成3d盒子之后back转到后面去就看不到了 */
  transform: rotateY(180deg);
}
/* .front {
  transform: rotateY(0deg);
} */
@keyframes rotate{
  0% {
    transform: rotateY(0deg);
  }
  100% {
    transform: rotateY(180deg);
  }
}

@keyframes rotate-reverse{
  0% {
    transform: rotateY(180deg);
  }
  100% {
    transform: rotateY(0deg);
  }
}